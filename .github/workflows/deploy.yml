name: Build and Deploy to AKS without Azure AD

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Check out the code
      - name: Check out the code
        uses: actions/checkout@v3

      # 2) Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3) Build with Maven
      - name: Build with Maven
        run: mvn clean package

      # 4) Docker login to Azure Container Registry (using admin credentials)
      - name: Login to ACR
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login CloudifyRegistry.azurecr.io \
            --username ${{ secrets.ACR_USERNAME }} \
            --password-stdin

      # 5) Build Docker image
      - name: Build Docker Image
        run: |
          docker build -t CloudifyRegistry.azurecr.io/Cloudify:latest .

      # 6) Push Docker image to ACR
      - name: Push Docker Image
        run: |
          docker push CloudifyRegistry.azurecr.io/Cloudify:latest

      # 7) Set up kubectl CLI
      - name: Install kubectl
        run: |
          sudo az repo update  # Just in case azure CLI is needed, or skip if not needed
          sudo apt-get update
          sudo apt-get install -y kubectl

      # 8) Configure KubeConfig from GitHub secret
      - name: Decode and write KubeConfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > kubeconfig
        shell: bash

      # 9) Deploy to AKS
      #    OPTION A: Use "kubectl set image" if you already have a Deployment in the cluster:
      - name: Update Image in Existing Deployment
        run: |
          kubectl --kubeconfig kubeconfig set image deployment/order-service \
            order-service=CloudifyRegistry.azurecr.io/Cloudify:latest

      #    OPTION B: Alternatively, apply a YAML manifest that references the new image:
      # - name: Deploy using YAML
      #   run: |
      #     kubectl --kubeconfig kubeconfig apply -f k8s/deployment.yaml
